// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: books.sql

package reposqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const bookCount = `-- name: BookCount :one
SELECT COUNT(*) FROM books
WHERE
    title ILIKE '%'||$1::text||'%' AND
    yop = $2::smallint
`

type BookCountParams struct {
	Title string
	Yop   int16
}

func (q *Queries) BookCount(ctx context.Context, arg BookCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, bookCount, arg.Title, arg.Yop)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const bookCreate = `-- name: BookCreate :exec
INSERT INTO books(title, yop, author, isbn, page)
VALUES ($1::text, $2::smallint, $3::text, $4, $5)
`

type BookCreateParams struct {
	Title  string
	Yop    int16
	Author string
	Isbn   pgtype.Text
	Page   pgtype.Int4
}

func (q *Queries) BookCreate(ctx context.Context, arg BookCreateParams) error {
	_, err := q.db.Exec(ctx, bookCreate,
		arg.Title,
		arg.Yop,
		arg.Author,
		arg.Isbn,
		arg.Page,
	)
	return err
}

const bookDeleteById = `-- name: BookDeleteById :exec
UPDATE books SET deleted_at = CURRENT_TIMESTAMP WHERE id = $1::uuid
`

func (q *Queries) BookDeleteById(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, bookDeleteById, id)
	return err
}

const bookDetailById = `-- name: BookDetailById :one
SELECT id, title, yop, author, isbn, page, created_at, updated_at, deleted_at FROM books WHERE id = $1::uuid
`

func (q *Queries) BookDetailById(ctx context.Context, id pgtype.UUID) (Book, error) {
	row := q.db.QueryRow(ctx, bookDetailById, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Yop,
		&i.Author,
		&i.Isbn,
		&i.Page,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const bookUpdateById = `-- name: BookUpdateById :exec
UPDATE books SET
    title = $1::text,
    yop = $2::smallint,
    author = $3::text,
    isbn = $4,
    page = $5,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $6::uuid
`

type BookUpdateByIdParams struct {
	Title  string
	Yop    int16
	Author string
	Isbn   pgtype.Text
	Page   pgtype.Int4
	ID     pgtype.UUID
}

func (q *Queries) BookUpdateById(ctx context.Context, arg BookUpdateByIdParams) error {
	_, err := q.db.Exec(ctx, bookUpdateById,
		arg.Title,
		arg.Yop,
		arg.Author,
		arg.Isbn,
		arg.Page,
		arg.ID,
	)
	return err
}
